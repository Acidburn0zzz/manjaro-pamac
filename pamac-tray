#! /usr/bin/python
# -*-coding:utf-8-*-

from gi.repository import Gtk, GObject
from subprocess import call
from pamac import transaction
import dbus
import threading

GObject.threads_init()
bus = dbus.SystemBus()

class Tray:
	def __init__(self):
		self.statusIcon = Gtk.StatusIcon()
		self.statusIcon.set_visible(True)

		self.menu = Gtk.Menu()
		self.menuItem = Gtk.ImageMenuItem('Install/Check for updates')
		self.menuItem.connect('activate', self.execute_update, self.statusIcon)
		self.menu.append(self.menuItem)
		self.menuItem = Gtk.ImageMenuItem('Run pamac-manager')
		self.menuItem.connect('activate', self.execute_manager, self.statusIcon)
		self.menu.append(self.menuItem)
		self.menuItem = Gtk.ImageMenuItem('Quit')
		self.menuItem.connect('activate', self.quit_tray, self.statusIcon)
		self.menu.append(self.menuItem)

		self.statusIcon.connect('popup-menu', self.popup_menu_cb, self.menu)

	def execute_update(self, widget, event, data = None):
		call(['/usr/bin/pamac-updater'])

	def execute_manager(self, widget, event, data = None):
		call(['/usr/bin/pamac-manager'])

	def quit_tray(self, widget, data = None):
		t.shutdown()
		Gtk.main_quit()

	def popup_menu_cb(self, widget, button, time, data = None):
		if button == 3:
			if data:
				data.show_all()
				data.popup(None, None, Gtk.StatusIcon.position_menu, self.statusIcon, 3, time)

	def update_icon(self, icon, info):
		self.statusIcon.set_from_file(icon)
		self.statusIcon.set_tooltip_markup(info)

class PeriodicTask(threading.Thread):
	"""Thread that executes a task every N seconds"""
	def __init__(self):
		threading.Thread.__init__(self)
		self._finished = threading.Event()
		self._interval = 30

	def setInterval(self, interval):
		"""Set the number of seconds we sleep between executing our task"""
		self._interval = interval

	def shutdown(self):
		"""Stop this thread"""
		self._finished.set()

	def run(self):
		while 1:
			if self._finished.isSet():
				return
			self.task()
			# sleep for interval or until shutdown
			self._finished.wait(self._interval)

	def task(self):
		call(['/usr/bin/pamac-check-updates'])

def set_icon(*arg):
	print('set-icon')
	transaction.get_handle()
	do_syncfirst, updates = transaction.get_updates()
	if updates:
		icon = '/usr/share/pamac/icons/24x24/status/update-normal.png'
		info = str(len(updates))+' update(s) available'
	else:
		icon = '/usr/share/pamac/icons/24x24/status/update-enhancement.png'
		info = ' No update available'
	print(info)
	tray.update_icon(icon, info)

bus.add_signal_receiver(set_icon, dbus_interface = "org.manjaro.pamac", signal_name = "EmitTransactionDone")

tray = Tray()
#set_icon()
t = PeriodicTask()
t.start()
Gtk.main()
